[{"id":0,"href":"/post/first-post-slug/","title":"First post!","parent":"Posts","content":"This is my first post, how exciting!\n"},{"id":1,"href":"/post/math-sample/","title":"Math Sample","parent":"Posts","content":"KaTeX can be used to generate complex math formulas. It supports in-line math using the \\\\( ... \\\\) delimiters, like this: \\( E = mc^2 \\). By default, it does not support in-line delimiters $...$ because those occur too commonly in typical webpages. It supports displayed math using the $$ or \\\\[...\\\\] delimiters, like this:\nFormula 1: \\( \\phi = \\frac{(1+\\sqrt{5})}{2} = 1.6180339887\\cdots \\)\nFormula 2: (same formula, different delimiter) \\[ \\phi = \\frac{(1+\\sqrt{5})}{2} = 1.6180339887\\cdots \\]\nAdditional details can be found on GitHub or on the Wiki.\nExample 1 If the text between $$ contains newlines it will rendered in display mode:\n$$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ \\[ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi \\]\nExample 2 $$ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } } $$ \\[ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } } \\]\nExample 3 $$ 1 + \\frac{q^2}{(1-q)}+\\frac{q^6}{(1-q)(1-q^2)}+\\cdots = \\prod_{j=0}^{\\infty}\\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \\quad\\quad \\text{for }\\lvert q\\rvert\u0026lt;1. $$ \\[ 1 + \\frac{q^2}{(1-q)}+\\frac{q^6}{(1-q)(1-q^2)}+\\cdots = \\prod_{j=0}^{\\infty}\\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \\quad\\quad \\text{for }\\lvert q\\rvertExample 4 Remember, certain characters are rendered by markdown, so you may need to workaround those issues. You can find the complete list of KaTeX supported functions here: https://khan.github.io/KaTeX/docs/supported.html\nFor example, the ' character can be replaced with ^\\prime:\n\\[ G^\\prime = G - u \\]\nThe \u0026quot; character can be replaced with ^{\\prime\\prime}:\n\\[ G^{\\prime\\prime} = G^\\prime - v \\]\n"},{"id":2,"href":"/post/","title":"Posts","parent":"About","content":""},{"id":3,"href":"/tags/code/","title":"code","parent":"Tags","content":""},{"id":4,"href":"/post/code-sample/","title":"Code Sample","parent":"Posts","content":"The following are two code samples using syntax highlighting.\nThe following is a code sample using triple backticks ( ``` ) code fencing provided in Hugo. This is client side highlighting and does not require any special installation.\nvar num1, num2, sum num1 = prompt(\u0026#34;Enter first number\u0026#34;) num2 = prompt(\u0026#34;Enter second number\u0026#34;) sum = parseInt(num1) + parseInt(num2) // \u0026#34;+\u0026#34; means \u0026#34;add\u0026#34;  alert(\u0026#34;Sum = \u0026#34; + sum) // \u0026#34;+\u0026#34; means combine into a string The following is a code sample using the \u0026ldquo;highlight\u0026rdquo; shortcode provided in Hugo. This is server side highlighting and requires Python and Pygments to be installed.\nvar num1, num2, sum num1 = prompt(\u0026#34;Enter first number\u0026#34;) num2 = prompt(\u0026#34;Enter second number\u0026#34;) sum = parseInt(num1) + parseInt(num2) // \u0026#34;+\u0026#34; means \u0026#34;add\u0026#34;  alert(\u0026#34;Sum = \u0026#34; + sum) // \u0026#34;+\u0026#34; means combine into a string  And here is the same code with line numbers:\n1 var num1, num2, sum 2 num1 = prompt(\u0026#34;Enter first number\u0026#34;) 3 num2 = prompt(\u0026#34;Enter second number\u0026#34;) 4 sum = parseInt(num1) + parseInt(num2) // \u0026#34;+\u0026#34; means \u0026#34;add\u0026#34; 5 alert(\u0026#34;Sum = \u0026#34; + sum) // \u0026#34;+\u0026#34; means combine into a string "},{"id":5,"href":"/tags/example/","title":"example","parent":"Tags","content":""},{"id":6,"href":"/tags/","title":"Tags","parent":"About","content":""},{"id":7,"href":"/1-intro/","title":"1. Introduction","parent":"About","content":"In this section, I\u0026rsquo;ll try to explain what \u0026lsquo;dynamic questions\u0026rsquo; really refer to, and how you can use the QBM to create your own dynamic questions.\nIf you\u0026rsquo;ve already made dynamic questions yourself through the QBM, you can probably skim through most of the stuff in this part.\nSub-sections        1.1. What are Dynamic Questions?     1.2. Using the QBM     1.3. Formatting Text     1.4. Mathematical Expressions with AsciiMath     1.5. Useful Editor Features     [TODO: Deal with \u0026gt;notes in 1.2]\n"},{"id":8,"href":"/1-intro/dynamic-questions/","title":"1.1. What are Dynamic Questions?","parent":"1. Introduction","content":"Dynamic questions are used when we have a good conceptual question that we\u0026rsquo;d like to ask repeatedly, with different valued constants each time the question is displayed. In these cases, code can be used to randomise certain parameters in the question, and then generate the corresponding question text, answers, and solutions.\nAn example of a dynamic question, viewed several times, is shown below:\nAs you can see in the above image, the question changes each time the question is viewed, with different answers and solutions to go with the quadratic equation.\n There\u0026rsquo;s a lot of good uses for dynamic questions - for one, they\u0026rsquo;re an efficient way of providing diverse experiences to students as they build mathematical skills. More context behind the \u0026lsquo;why\u0026rsquo; on these questions will be covered in section 2.2.1. Context.\n "},{"id":9,"href":"/1-intro/using-the-qbm/","title":"1.2. Using the QBM","parent":"1. Introduction","content":"In our system, dynamic questions are created through directly writing PHP code in place of the usual text. To do so, after you\u0026rsquo;ve selected a round and level for your question, click on the \u0026ldquo;PHP\u0026rdquo; button in the editor:\nThe following text editor should appear, with automatically generated PHP tags (\u0026lt;?php and ?\u0026gt;) where PHP code should be written. Note that the closing ?\u0026gt; tag is important, and should not be removed to avoid any potential problems with how the code is run.\nThere currently appears to be a bug where the first time this window is loaded (or whenever you reset your browser cache), the editor might be stuck loading; simply re-opening the editor window will fix this.\nAlso, the \u0026lsquo;preview\u0026rsquo; button only works after you\u0026rsquo;ve selected a round and level for your question! If you attempt to write something in the solution box without having selected a round or level, the question can\u0026rsquo;t be loaded, and the preview will appear blank!\n PHP code typed in the editor is saved after pressing the ‘update’ button. Note that the code (or its output) won’t be visible in the editor itself, but the output of the code can still be checked using the ‘preview’ button.\nPHP code must also be inserted into each answer box, as well as the solution; their sections will have a PHP editor of their own.\nNote that the order of solutions in MCQs are always randomised - it is fine to set answer \u0026lsquo;A\u0026rsquo; as the correct solution each time.\n"},{"id":10,"href":"/1-intro/formatting-text/","title":"1.3. Formatting Text","parent":"1. Introduction","content":"When PHP calls echo on any string, it will ultimately be rendered as HTML. Because of this, text can be formatted by inserting the appropriate HTML tags into the strings.\nYou can try this yourself! As an example, enter the code below into the editor. You\u0026rsquo;ll see that the lines all apply formatting through the \u0026lt;b\u0026gt;, \u0026lt;i\u0026gt; and \u0026lt;u\u0026gt; markup tags.\n\u0026lt;?php echo \u0026#34;This text is normal. \u0026#34;; echo \u0026#34;\u0026lt;b\u0026gt;This text is bolded! \u0026lt;/b\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;i\u0026gt;This text is italicised! \u0026lt;/i\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;b\u0026gt;\u0026lt;u\u0026gt;This text is bolded \u0026lt;i\u0026gt;and\u0026lt;/i\u0026gt; underlined! \u0026lt;/u\u0026gt;\u0026lt;/b\u0026gt;\u0026#34;; ?\u0026gt;Furthermore, to add line breaks in your code, the newline character \\n will not work. For a line break, you\u0026rsquo;ll need to use the break tag \u0026lt;br/\u0026gt; instead. For example:\n\u0026lt;?php echo \u0026#34;Line one\u0026#34;; echo \u0026#34;\u0026lt;br/\u0026gt;\u0026#34;; echo \u0026#34;Line two\u0026lt;br/\u0026gt;Line three\u0026#34;; ?\u0026gt; As an aside, note that PHP directly puts the echo\u0026rsquo;d string into the HTML document itself, and the document is rendered after all the PHP code is run.\nThis means you could technically split out tags into separate strings, like this:\n\u0026lt;?php echo \u0026#34;Whatever you echo will be put together and \u0026lt;b\u0026#34;; echo \u0026#34;\u0026gt; directly \u0026lt;/\u0026#34;; echo \u0026#34;b\u0026gt; be rendered as HTML.\u0026#34; ?\u0026gt;And get this as output - with the resulting HTML that\u0026rsquo;s actually being rendered as shown on the right:\nIn most cases, you\u0026rsquo;d never want to do this on purpose - but this is something to look out for if your output appears to be weirdly formatted for no reason.\n"},{"id":11,"href":"/1-intro/asciimath/","title":"1.4. Mathematical Expressions with AsciiMath","parent":"1. Introduction","content":"We also have support for displaying mathematical expressions using the AsciiMath markup language - this was actually used in the example dynamic question you saw above.\nAny bit of text can be rendered as an AsciiMath expression by simply encasing it in backticks (the ` character).\n Note that this character is not the same as an apostrophe (')! You\u0026rsquo;d typically find this symbol on the top-left of a QWERTY keyboard.\n For instance, the example expression on the AsciiMath site can be included by writing the following directly in the text box itself:\nEquivalently, we could do this with the following PHP code:\n\u0026lt;?php echo \u0026#34;Sum of sequence of cubes: `sum_(i=1)^n i^3=((n(n+1))/2)^2`\u0026#34;; ?\u0026gt;In both cases, we\u0026rsquo;d get the same output:\nGenerally, using PHP to include AsciiMath in questions is more convenient, as most of the expressions we want to render will involve randomised constants. Ways of doing this will be covered more thoroughly in 3.1. Basic Randomisation.\n Note: You may need to split very long AsciiMath expressions into muliple parts so that they are rendered on different lines if required. Otherwise, the expresion will render entirely on one line and go off-screen.\nConsider a case where we show how to fully expand the above expression step-by-step, and use the following code:\necho \u0026#34;Sum of sequence of cubes: `sum_(i=1)^n i^3 = ((n(n+1))/2)^2 = (n(n+1))^2/4 = (n^2 (n+1)^2)/4 = (n^2(n^2 + 2n + 1))/4 = (n^4 + 2n^3 + n^2)/4`\u0026#34;; Unfortunately, if we render the entire thing in a single expression, it\u0026rsquo;ll be put all on one line. If the page isn\u0026rsquo;t wide enough, it\u0026rsquo;ll be cut-off halfway through:\nThe best way to deal with this is to split out the expression into multiple AsciMath expressions. While doing this, you can also use multiple strings and join them together with the dot (.) operator; this tends to make the expression a lot easier to read for yourself as well.\necho \u0026#34;Sum of sequence of cubes: \u0026#34; . \u0026#34;`sum_(i=1)^n i^3`\u0026#34; . \u0026#34;`= ((n(n+1))/2)^2`\u0026#34; . \u0026#34;`= (n(n+1))^2/4`\u0026#34; . \u0026#34;`= (n^2 (n+1)^2)/4`\u0026#34; . \u0026#34;`= (n^2(n^2 + 2n + 1))/4`\u0026#34; . \u0026#34;`= (n^4 + 2n^3 + n^2)/4`\u0026#34;;  "},{"id":12,"href":"/1-intro/editor-features/","title":"1.5. Useful Editor Features","parent":"1. Introduction","content":"The PHP editor is actually just a fancier version of the default \u0026lsquo;HTML Source\u0026rsquo; editor. Apart from syntax highlighting and autocompletion, there\u0026rsquo;s a few additional features of the editor that can allow you to write and edit code faster, including auto-indentation and a bunch of keyboard shortcuts.\nSome main useful shortcuts will probably be these:\n   Windows Mac Action     Alt-Shift-Up/Down Command-Option-Up/Down Copy (selected) lines up/down   Alt-Up/Down Option-Up/Down Move (selected) lines up/down   Tab Tab Indent (selection)   Shift-Tab Shift-Tab Outdent (selection)   Ctrl-Click Command-Click Add another cursor at clicked location   Ctrl-Alt-Up/Down Ctrl-Option-Up/Down Add another cursor above/below the current cursor(s)   Ctrl-F Command-F Find   Ctrl-H Command-Option-F Replace     A complete list of the shortcuts can be found here:\nhttps://github.com/ajaxorg/ace/wiki/Default-Keyboard-Shortcuts\n "},{"id":13,"href":"/2-design/","title":"2. Dynamic Question Design","parent":"About","content":"This section looks at how you might go about designing dynamic questions in general so that they can fit our competitions well.\nThe reason why I\u0026rsquo;ve included this section on its own is because writing dynamic questions can be significantly different compared to static questions. The element of randomisation involved with each question results in many new issues that you may need to deal with.\nIn this section, I\u0026rsquo;ll look at some issues that mainly occur in dynamic questions. Next, I\u0026rsquo;ll go over a few general guidelines that can help you avoid these problems, so that your questions can be approved as quickly as possible.\nThe sections afterwards will focus on more specific, practical solutions to some of issues you might encounter when making questions themselves.\nSub-sections        2.1. Common Issues with Dynamic Questions     2.2. General Design Guidelines     "},{"id":14,"href":"/2-design/common-issues/","title":"2.1. Common Issues with Dynamic Questions","parent":"2. Dynamic Question Design","content":"Listed below are some problems with dynamic questions that I\u0026rsquo;ve seen and made myself before. They all stem from randomisation in code, but the nature of these issues can be rather different; some are directly involved with the code, while others are due to the design of the question and which values are randomised.\nEither way, it can be helpful to take these considerations into account as you write your own code!\n1. INFs and unrounded answers    When questions involve division, trigonometric functions, irrational numbers and generally anything \u0026lsquo;messy\u0026rsquo;, make sure to check how the values end up being displayed! You might otherwise end up with something like this:\n The answer in the image above was probably not the intended solution - unfortunately, PHP will not automatically return the results of calculations as fractions or expressions of pi.\n Unrounded numbers will be given up to 16 or so decimal places, while dividing by 0 (or taking the tangent of 90˚, etc.) will give you an INF value that works as you might expect with other numbers.\nThis is generally unwanted behaviour - you\u0026rsquo;d want to explicitly ask for rounded values, or even better, design the question to only deal with values that don\u0026rsquo;t need to be rounded. In the above case, asking for the answer in terms of π, and dealing properly with cases where radius is not divisible by 3!\n Another note with rounding - when dealing with currency, make sure that the values you get in the question are appropriate with the denominations of the currency! You typically can\u0026rsquo;t have 0.001 of a US dollar, or 0.5 Japanese Yen, for example.\n  2. Floating-point errors    This is a general problem with most computing languages, and you can replicate this one yourself with the following code:\necho 3.14159265 - 3.14; You\u0026rsquo;ll find that PHP does something strange here and returns the value 0.0015926500000001.\nWhy it does this is explained at length here:\nhttps://floating-point-gui.de/\nBut, in a nutshell, arithmetic in computers done in base 2 rather than base 10, which can lead to some rounding errors on decimals like these ones.\nGenerally, you\u0026rsquo;ll only need to worry about this in PHP when very small decimals are involved. Once again, consider rounding your values or designing the question to avoid this situation entirely.\n 3. Randomised values don\u0026rsquo;t make sense    When writing a static question, the numbers chosen generally follow a number of implicit assumptions, such as:\n If a question involves finding GCD/LCM of 2 numbers, the values given should be different When calculating an answer in currency, the final answer should be in the proper denominations (i.e. not having 0.001 USD, or 0.5 JPY).  Some of these are harder to deal with - such as picking 3 random points on a grid and making sure they form a triangle, not a line. The randomisation methods covered in 4.1. Introducing \u0026lsquo;Randomness\u0026rsquo; may be able to help out with this.\nIf you forget to check for these conditions when randomising your values, then often you end up with a question that either sounds weird, or no longer assesses what was originally intended:\n The aim in the above question is for students learn how to calculate distance when several speeds are given - but this does not apply if the speeds given are the same!\n  4. Not enough Randomisation    Questions should involve enough randomisation so that the questions generated don\u0026rsquo;t look all the same.\nThe second time a student sees the same dynamic question, we want to be confident that the calculations used last time cannot be used to solve the question.\n Note: As said in section 1, the order of solutions is randomised by default; this does not count as \u0026lsquo;randomisation\u0026rsquo; in a dynamic question.\n As a rule of thumb, it would be good to have at least 20 possible variations of your question. More randomisation is better, but be careful of the next issue:\n 5. Questions varying too much in difficulty    When randomising your numbers, some values might lead to a question that requires much harder calculations or even an entirely different solving method.\nFor example, consider finding the roots of f(x) = x^2 + 2x + 1, compared to f(x) = x^2 + 2x + 2!\nThe former can be factorised and solved immediately, whereas the other requires the quadratic formula and also has complex roots - overall much harder to solve.\nThis ties in with the above point about \u0026lsquo;implicit assumptions\u0026rsquo; as well. If you\u0026rsquo;re giving side lengths and angles of a triangle for a question about the cosine rule, make sure you avoid angles like 90˚ - this would mean they could use Pythagoareas' Theorem instead!\n 6. (MCQs) Issues with Answer Options    Multiple-choice questions have additional considerations due to the fact that you need to provide random wrong answers.\nOn one hand, the answers you give for multiple-choice questions can\u0026rsquo;t be completely random - otherwise the correct answer can be plainly obvious:\nOn the other hand, care is also needed when giving wrong answers that relate to the question - otherwise your wrong answers might be duplicates of each other, or even a correct solution themselves!\nThis is an issue even if it rarely occurs, as thousands of students are going to be seeing these questions, and it\u0026rsquo;s likely that they\u0026rsquo;ll come across the problem at least once.\nA few techniques in 4.1. Introducing \u0026lsquo;Randomness\u0026rsquo; can help you avoid getting duplicate values, but once again, the best option is to design your question such that it never comes across this issue in the first place.\n"},{"id":15,"href":"/2-design/guidelines/","title":"2.2. General Design Guidelines","parent":"2. Dynamic Question Design","content":"Apart from the issues with code in a dynamic question, there also a few general things to consider when designing and writing a question. The guidelines below can be split into 3 main groups, and in summary they are to:\n Consider Context: What the question is used for Consider Formatting: How the question is viewed Consider Wording + Detail: How the question will be understood  While I\u0026rsquo;ll go into detail for each part, the key idea above all of this is to use common sense! When in doubt, place yourself in the position of a student answering these questions, and whether you would find them confusing or unfair.\n2.2.1. Context    It\u0026rsquo;s important to take into account how the questions you\u0026rsquo;re writing will be used - this will help with a lot of design decisions you make.\nJust a bit of background on the idea for these dynamic questions:\nCurrently, the idea is that they\u0026rsquo;ll be used in admissions tests for students from Year 7 to 10.\nFor each year group, the test will have 30 question \u0026lsquo;slots\u0026rsquo;, each reserved for a particular topic. Each question slot will be filled with 1 of the 3 dynamic questions for that topic.\n The bottom line is that a lot of randomisation will be involved when dynamic questions are used to generate assessments and tests. As a result, it\u0026rsquo;s important to ensure that questions are consistent in difficulty and style so that we can maintain fairness of testing.\nWith that said, here are a few guidelines that will help you with designing these questions:\n  Consider the target audience of your questions, and set bounds for the difficulty of your questions.\n  Searching for topics with a specific year group or key stage can be very useful in understanding what students of a particular age might be learning. You might even find some example questions that you can use for inspiration!\n BBC Bitesize is generally a good resource to see what level of questions you want to ask - there are many other good websites out there as well!\n   The bounds you set might involve topics to avoid or terminology that is too advanced. This helps keep the difficulty of your questions consistent.\n For example, with terminology, it may be more appropriate to ask for \u0026ldquo;area under a graph\u0026rdquo; rather than \u0026ldquo;solving a definite integral\u0026rdquo;.      Try to generate values easy to work with, and keep descriptions short and succinct.\n  Consider the solving conditions of your questions:\n  Students are generally going to be allowed calculators, but questions should be solvable without one. The main focus isn\u0026rsquo;t the calculation, but rather the method of approaching and solving a problem.\n Simpler calculations will also make it easier to check your own questions!\n   Students will be given on average 2 minutes per question - this includes the time involved in reading and understanding the content. Questions should be clear and solution process generally should not be longer than a minute.\n The main work involved with solutions should also be relevant to the question itself - unfortunately, with the question below, the time it takes to count values would be more important than understanding the what the mode is!\n       Use terms and contexts that can be understood, regardless of nationality or (pop) culture.\n  We\u0026rsquo;d like the tests to be applicable to all students around the world, so you may need to consider doing the following:\n  Define terms that are specific to a particular country/area.\n For example, not everyone will immediately understand the relationship between \u0026lsquo;nickels\u0026rsquo;, \u0026lsquo;dimes\u0026rsquo; and \u0026lsquo;quarters\u0026rsquo; when used in a question, as these are specific to the US currency.\n   Provide relatable context in questions (where applicable).\n Not everyone will understand that \u0026ldquo;Yasuo\u0026rsquo;s Q does 20 + 100% AD damage at level 1\u0026rdquo;! It\u0026rsquo;s fine to add references for \u0026lsquo;flavour\u0026rsquo; in your questions, but they shouldn\u0026rsquo;t impede the process of solving the question.\n        2.2.2. Formatting    The guidelines below involve using the tools available to present your questions in a format that\u0026rsquo;s consistent and easily understandable.\n Use AsciiMath on relevant numbers and any algebraic expressions.\n These help emphasise important parts of the question, and keep the appearance of expressions consistent.    Consider including a diagram when it makes wording the question much easier.\n  Usually happens with questions on geometry. If describing the question feels too lengthy or complicated, then a diagram can help students understand the question much faster.\n  Note that there are exceptions to this rule - in some cases, you may want to intentionally avoid using a diagram as part of the difficulty of the question, so that students will need to visualise the situation themselves.\n   Important Note: Please keep in mind that your diagram should be clear and used by your question! Try to keep diagrams simple and small; they should be no bigger than 500px by 500px.\n    2.2.3. Wording + Detail    These guidelines are about how question text and solutions can be written to make it more likely that your questions are understood and solved as intended by students.\n Emphasise important or unusual information in questions - especially if it\u0026rsquo;s about the form of your answer.\n  A fair question should not be aiming to \u0026lsquo;catch out\u0026rsquo; someone for misreading slight details.\n  If a question is open-answer, make sure to note the unit you want students to answer in (if applicable), or how many significant figures to round to.\n Note the specific way the question below asks for the answer, regarding both units and rounding - this makes it clear for students how to provide their answers in the open-response format.\n(Note also that the question gives a specific conversion between inches and cm for students to use, respecting the context; on the other hand, 12 inches to 1 foot is presumed knowledge of the imperial system.)\n   Try to be consistent on how you achieve emphasis - specific question wording, the order in which you give information, or by bolding text.\n    Solutions should describe both the general solving process and perform the specific calculation to arrive at the answer.\n  These solutions will be read by the students themselves when doing practice, so it\u0026rsquo;s important they can be understood from the perspective of someone who cannot answer the question.\n  Ideally, students should be able to figure out why they answered incorrectly after they read the solution. Step-by-step calculations help a lot - you should do these for the important or complicated parts of your question.\n As an example, consider the following statement in a solution:\n\u0026quot;The amount for expenses is 15% of $850, so $722.5 remains.\u0026quot; Multiple steps are done in a single statement, and it\u0026rsquo;s also never shown or explained where the \u0026lsquo;$722.5\u0026rsquo; value came from.\nNote that in some cases, this is fine - if it is only a small part of the question and other complex steps are involved, we can assume students will fill in the gaps.\nHowever, for other cases, we\u0026rsquo;d probably want to include more detail. First a calculation to first show 100% - 15% = 85% of the money is not spent, and so $850 * 85% = $722.50 remains.\n   With multiple-choice questions, you may need to explain why other multiple-choice options were wrong.\n This applies to questions where the correct option doesn\u0026rsquo;t imply the other options are wrong - something like \u0026ldquo;select the following number that is prime\u0026rdquo;, for example.\nJust because one option has a prime number, it doesn\u0026rsquo;t automatically mean the other numbers won\u0026rsquo;t be prime!      "},{"id":16,"href":"/","title":"About","parent":"","content":"Welcome to my question-writing guide! The aim of this document is to give you a practical idea on what dynamic questions are, how they differ to the usual \u0026lsquo;static\u0026rsquo; questions, and provide some coding techniques that will hopefully make the process of writing questions easier.\nThe guide is currently incomplete; only Sections 1 and 2 of this guide have been properly written.  Regarding prerequisites: For Sections 1 and 2, knowledge of basic HTML syntax and AsciiMath would be useful. From Section 3, I\u0026rsquo;ll begin including snippets of PHP code to aid with explanations - knowledge of arrays, conditionals (if/else), loops (for/while), and functions will probably be required then.\nIf you have any questions or confusions while reading this, please feel free to contact me! The guide is still pretty new and I\u0026rsquo;m sure there\u0026rsquo;ll be quite a few spots I\u0026rsquo;ve forgotten to clear up.\nPlease note that this document is not meant to be read all at once! I\u0026rsquo;ve intended it as something that you can frequently come back to if you\u0026rsquo;re ever stuck on something.\n Section 1 (the introduction) talks about how to use the QBM itself; Section 2 focuses on general dos and don\u0026rsquo;ts with designing and coding questions; The remaining sections will cover more specific situations that arise with certain kinds of math questions.  If you\u0026rsquo;ve already read the original QBM guide and just want a quick look at some new advice with dynamic questions in general, then you might want to begin with 2.1. Common Issues with Dynamic Questions and 2.2. General Design Guidelines!\n  "},{"id":17,"href":"/categories/","title":"Categories","parent":"About","content":""},{"id":18,"href":"/other/contact/","title":"Contact Info","parent":"Others","content":"If there\u0026rsquo;s stuff that doesn\u0026rsquo;t quite make sense or seems wrong, feel free to send me a message! While I\u0026rsquo;ll try to respond as soon as I can, do note that there are a lot of resources online that can help as well.\nHere are a few ways to contact me:\n Find me on the EV Slack!  Send a DM, or to the channel #wmc-questions or #omc-questions.   Email: jyim1120@gmail.com Messenger: jonathan.yim.121  Also note that there are other question writers on the Slack channel you can ask for help!\n"},{"id":19,"href":"/other/","title":"Others","parent":"About","content":""}]