[{"id":0,"href":"/post/first-post-slug/","title":"First post!","parent":"Posts","content":"This is my first post, how exciting!\n"},{"id":1,"href":"/post/math-sample/","title":"Math Sample","parent":"Posts","content":"KaTeX can be used to generate complex math formulas. It supports in-line math using the \\\\( ... \\\\) delimiters, like this: \\( E = mc^2 \\). By default, it does not support in-line delimiters $...$ because those occur too commonly in typical webpages. It supports displayed math using the $$ or \\\\[...\\\\] delimiters, like this:\nFormula 1: \\( \\phi = \\frac{(1+\\sqrt{5})}{2} = 1.6180339887\\cdots \\)\nFormula 2: (same formula, different delimiter) \\[ \\phi = \\frac{(1+\\sqrt{5})}{2} = 1.6180339887\\cdots \\]\nAdditional details can be found on GitHub or on the Wiki.\nExample 1 If the text between $$ contains newlines it will rendered in display mode:\n$$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ \\[ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi \\]\nExample 2 $$ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } } $$ \\[ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } } \\]\nExample 3 $$ 1 + \\frac{q^2}{(1-q)}+\\frac{q^6}{(1-q)(1-q^2)}+\\cdots = \\prod_{j=0}^{\\infty}\\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \\quad\\quad \\text{for }\\lvert q\\rvert\u0026lt;1. $$ \\[ 1 + \\frac{q^2}{(1-q)}+\\frac{q^6}{(1-q)(1-q^2)}+\\cdots = \\prod_{j=0}^{\\infty}\\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \\quad\\quad \\text{for }\\lvert q\\rvertExample 4 Remember, certain characters are rendered by markdown, so you may need to workaround those issues. You can find the complete list of KaTeX supported functions here: https://khan.github.io/KaTeX/docs/supported.html\nFor example, the ' character can be replaced with ^\\prime:\n\\[ G^\\prime = G - u \\]\nThe \u0026quot; character can be replaced with ^{\\prime\\prime}:\n\\[ G^{\\prime\\prime} = G^\\prime - v \\]\n"},{"id":2,"href":"/post/","title":"Posts","parent":"About","content":""},{"id":3,"href":"/tags/code/","title":"code","parent":"Tags","content":""},{"id":4,"href":"/post/code-sample/","title":"Code Sample","parent":"Posts","content":"The following are two code samples using syntax highlighting.\nThe following is a code sample using triple backticks ( ``` ) code fencing provided in Hugo. This is client side highlighting and does not require any special installation.\nvar num1, num2, sum num1 = prompt(\u0026#34;Enter first number\u0026#34;) num2 = prompt(\u0026#34;Enter second number\u0026#34;) sum = parseInt(num1) + parseInt(num2) // \u0026#34;+\u0026#34; means \u0026#34;add\u0026#34;  alert(\u0026#34;Sum = \u0026#34; + sum) // \u0026#34;+\u0026#34; means combine into a string The following is a code sample using the \u0026ldquo;highlight\u0026rdquo; shortcode provided in Hugo. This is server side highlighting and requires Python and Pygments to be installed.\nvar num1, num2, sum num1 = prompt(\u0026#34;Enter first number\u0026#34;) num2 = prompt(\u0026#34;Enter second number\u0026#34;) sum = parseInt(num1) + parseInt(num2) // \u0026#34;+\u0026#34; means \u0026#34;add\u0026#34;  alert(\u0026#34;Sum = \u0026#34; + sum) // \u0026#34;+\u0026#34; means combine into a string  And here is the same code with line numbers:\n1 var num1, num2, sum 2 num1 = prompt(\u0026#34;Enter first number\u0026#34;) 3 num2 = prompt(\u0026#34;Enter second number\u0026#34;) 4 sum = parseInt(num1) + parseInt(num2) // \u0026#34;+\u0026#34; means \u0026#34;add\u0026#34; 5 alert(\u0026#34;Sum = \u0026#34; + sum) // \u0026#34;+\u0026#34; means combine into a string "},{"id":5,"href":"/tags/example/","title":"example","parent":"Tags","content":""},{"id":6,"href":"/tags/","title":"Tags","parent":"About","content":""},{"id":7,"href":"/other/","title":"Other","parent":"About","content":"woah this ain\u0026rsquo;t supposed to be here\n404 time\n"},{"id":8,"href":"/1-intro/","title":"1. Introduction","parent":"About","content":"In this section, I\u0026rsquo;ll try to explain what \u0026lsquo;dynamic questions\u0026rsquo; really refer to, and how you can use the QBM to create your own dynamic questions.\nIf you\u0026rsquo;ve already made dynamic questions yourself through the QBM, you can probably skim through most of the stuff in this part.\nSub-sections        1.1. What are Dynamic Questions?     1.2. Using the QBM     1.3. Formatting Text     1.4. Mathematical Expressions with AsciiMath     1.5. Useful Editor Features     [TODO: Deal with \u0026gt;notes in 1.2]\n"},{"id":9,"href":"/1-intro/dynamic-questions/","title":"1.1. What are Dynamic Questions?","parent":"1. Introduction","content":"Dynamic questions are used when we have a good conceptual question that we\u0026rsquo;d like to ask repeatedly, with different valued constants each time the question is displayed. In these cases, code can be used to randomise certain parameters in the question, and then generate the corresponding question text, answers, and solutions.\nAn example of a dynamic question, viewed several times, is shown below:\nExample 1   Example 2   Example 3    As you can see in the above images, the question changes each time the question is viewed, with different answers and solutions to go with the quadratic equation.\n There\u0026rsquo;s a lot of good uses for dynamic questions - for one, they\u0026rsquo;re an efficient way of providing diverse experiences to students as they build mathematical skills. More context behind the \u0026lsquo;why\u0026rsquo; on these questions will be covered in section 2.2.1. Context.\n "},{"id":10,"href":"/1-intro/using-the-qbm/","title":"1.2. Using the QBM","parent":"1. Introduction","content":"In our system, dynamic questions are created through directly writing PHP code in place of the usual text. To do so, after you\u0026rsquo;ve selected a round and level for your question, click on the \u0026ldquo;PHP\u0026rdquo; button in the editor:\nThe following text editor should appear, with automatically generated PHP tags (\u0026lt;?php and ?\u0026gt;) where PHP code should be written. Note that the closing ?\u0026gt; tag is important, and should not be removed to avoid any potential problems with how the code is run.\nThere currently appears to be a bug where the first time this window is loaded (or whenever you reset your browser cache), the editor might be stuck loading; simply re-opening the editor window will fix this.\nAlso, the \u0026lsquo;preview\u0026rsquo; button only works after you\u0026rsquo;ve selected a round and level for your question! If you attempt to write something in the solution box without having selected a round or level, the question can\u0026rsquo;t be loaded, and the preview will appear blank!\n PHP code typed in the editor is saved after pressing the ‘update’ button. Note that the code (or its output) won’t be visible in the editor itself, but the output of the code can still be checked using the ‘preview’ button.\nPHP code must also be inserted into each answer box, as well as the solution; their sections will have a PHP editor of their own.\nNote that the order of solutions in MCQs are always randomised - it is fine to set answer \u0026lsquo;A\u0026rsquo; as the correct solution each time.\n"},{"id":11,"href":"/1-intro/formatting-text/","title":"1.3. Formatting Text","parent":"1. Introduction","content":"When PHP calls echo on any string, it will ultimately be rendered as HTML. Because of this, text can be formatted by inserting the appropriate HTML tags into the strings.\nYou can try this yourself! As an example, enter the code below into the editor. You\u0026rsquo;ll see that the lines all apply formatting through the \u0026lt;b\u0026gt;, \u0026lt;i\u0026gt; and \u0026lt;u\u0026gt; markup tags.\n\u0026lt;?php echo \u0026#34;This text is normal. \u0026#34;; echo \u0026#34;\u0026lt;b\u0026gt;This text is bolded! \u0026lt;/b\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;i\u0026gt;This text is italicised! \u0026lt;/i\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;b\u0026gt;\u0026lt;u\u0026gt;This text is bolded \u0026lt;i\u0026gt;and\u0026lt;/i\u0026gt; underlined! \u0026lt;/u\u0026gt;\u0026lt;/b\u0026gt;\u0026#34;; ?\u0026gt;Furthermore, to add line breaks in your code, the newline character \\n will not work. For a line break, you\u0026rsquo;ll need to use the break tag \u0026lt;br/\u0026gt; instead. For example:\n\u0026lt;?php echo \u0026#34;Line one\u0026#34;; echo \u0026#34;\u0026lt;br/\u0026gt;\u0026#34;; echo \u0026#34;Line two\u0026lt;br/\u0026gt;Line three\u0026#34;; ?\u0026gt; More on echo-ing Tags    As an aside, note that PHP directly puts the echo\u0026rsquo;d string into the HTML document itself, and the document is rendered after all the PHP code is run.\nThis means you could technically split out tags into separate strings, like this:\n\u0026lt;?php echo \u0026#34;Whatever you echo will be put together and \u0026lt;b\u0026#34;; echo \u0026#34;\u0026gt; directly \u0026lt;/\u0026#34;; echo \u0026#34;b\u0026gt; be rendered as HTML.\u0026#34; ?\u0026gt;And get this as output - with the resulting HTML that\u0026rsquo;s actually being rendered as shown on the right:\nIn most cases, you\u0026rsquo;d never want to do this on purpose - but this is something to look out for if your output appears to be weirdly formatted for no reason.\n"},{"id":12,"href":"/1-intro/asciimath/","title":"1.4. Mathematical Expressions with AsciiMath","parent":"1. Introduction","content":"We also have support for displaying mathematical expressions using the AsciiMath markup language - this was actually used in the example dynamic question you saw above.\nAny bit of text can be rendered as an AsciiMath expression by simply encasing it in backticks (the ` character).\n Note that this character is not the same as an apostrophe (')! You\u0026rsquo;d typically find this symbol on the top-left of a QWERTY keyboard.\n For instance, the example expression on the AsciiMath site can be included by writing the following directly in the text box itself:\nEquivalently, we could do this with the following PHP code:\n\u0026lt;?php echo \u0026#34;Sum of sequence of cubes: `sum_(i=1)^n i^3=((n(n+1))/2)^2`\u0026#34;; ?\u0026gt;In both cases, we\u0026rsquo;d get the same output:\nGenerally, using PHP to include AsciiMath in questions is more convenient, as most of the expressions we want to render will involve randomised constants. Ways of doing this will be covered more thoroughly in 3.1. Basic Randomisation.\n Note: You may need to split very long AsciiMath expressions into muliple parts so that they are rendered on different lines if required. Otherwise, the expresion will render entirely on one line and go off-screen.\nConsider a case where we show how to fully expand the above expression step-by-step, and use the following code:\necho \u0026#34;Sum of sequence of cubes: `sum_(i=1)^n i^3 = ((n(n+1))/2)^2 = (n(n+1))^2/4 = (n^2 (n+1)^2)/4 = (n^2(n^2 + 2n + 1))/4 = (n^4 + 2n^3 + n^2)/4`\u0026#34;; Unfortunately, if we render the entire thing in a single expression, it\u0026rsquo;ll be put all on one line. If the page isn\u0026rsquo;t wide enough, it\u0026rsquo;ll be cut-off halfway through:\nThe best way to deal with this is to split out the expression into multiple AsciMath expressions. While doing this, you can also use multiple strings and join them together with the dot (.) operator; this tends to make the expression a lot easier to read for yourself as well.\necho \u0026#34;Sum of sequence of cubes: \u0026#34; . \u0026#34;`sum_(i=1)^n i^3`\u0026#34; . \u0026#34;`= ((n(n+1))/2)^2`\u0026#34; . \u0026#34;`= (n(n+1))^2/4`\u0026#34; . \u0026#34;`= (n^2 (n+1)^2)/4`\u0026#34; . \u0026#34;`= (n^2(n^2 + 2n + 1))/4`\u0026#34; . \u0026#34;`= (n^4 + 2n^3 + n^2)/4`\u0026#34;;  "},{"id":13,"href":"/1-intro/editor-features/","title":"1.5. Useful Editor Features","parent":"1. Introduction","content":"The PHP editor is actually just a fancier version of the default \u0026lsquo;HTML Source\u0026rsquo; editor. Apart from syntax highlighting and autocompletion, there\u0026rsquo;s a few additional features of the editor that can allow you to write and edit code faster, including auto-indentation and a bunch of keyboard shortcuts.\nSome main useful shortcuts will probably be these:\n   Windows Mac Action     Alt-Shift-Up/Down Command-Option-Up/Down Copy (selected) lines up/down   Alt-Up/Down Option-Up/Down Move (selected) lines up/down   Tab Tab Indent (selection)   Shift-Tab Shift-Tab Outdent (selection)   Ctrl-Click Command-Click Add another cursor at clicked location   Ctrl-Alt-Up/Down Ctrl-Option-Up/Down Add another cursor above/below the current cursor(s)   Ctrl-F Command-F Find   Ctrl-H Command-Option-F Replace     A complete list of the shortcuts can be found here:\nhttps://github.com/ajaxorg/ace/wiki/Default-Keyboard-Shortcuts\n "},{"id":14,"href":"/2-design/","title":"2. Dynamic Question Design","parent":"About","content":"This section looks at how you might go about designing dynamic questions in general so that they can fit our competitions well.\nThe reason why I\u0026rsquo;ve included this section on its own is because writing dynamic questions can be significantly different compared to static questions. The element of randomisation involved with each question results in many new issues that you may need to deal with.\nIn this section, I\u0026rsquo;ll look at some issues that mainly occur in dynamic questions. Next, I\u0026rsquo;ll go over a few general guidelines that can help you avoid these problems, so that your questions can be approved as quickly as possible.\nThe sections afterwards will focus on more specific, practical solutions to some of issues you might encounter when making questions themselves.\nSub-sections        2.1. Common Issues with Dynamic Questions     2.2. General Design Guidelines     "},{"id":15,"href":"/2-design/common-issues/","title":"2.1. Common Issues with Dynamic Questions","parent":"2. Dynamic Question Design","content":"Listed below are some problems with dynamic questions that I\u0026rsquo;ve seen and made myself before. They all stem from randomisation in code, but the nature of these issues can be rather different; some are directly involved with the code, while others are due to the design of the question and which values are randomised.\nEither way, it can be helpful to take these considerations into account as you write your own code!\n1. INFs and unrounded answers    When questions involve division, trigonometric functions, irrational numbers and generally anything \u0026lsquo;messy\u0026rsquo;, make sure to check how the values end up being displayed! You might otherwise end up with something like this:\n The answer in the image above was probably not the intended solution - unfortunately, PHP will not automatically return the results of calculations as fractions or expressions of pi.\n Unrounded numbers will be given up to 16 or so decimal places, while dividing by 0 (or taking the tangent of 90˚, etc.) will give you an INF value that works as you might expect with other numbers.\nThis is generally unwanted behaviour - you\u0026rsquo;d want to explicitly ask for rounded values, or even better, design the question to only deal with values that don\u0026rsquo;t need to be rounded. In the above case, asking for the answer in terms of π, and dealing properly with cases where radius is not divisible by 3!\n Another note with rounding - when dealing with currency, make sure that the values you get in the question are appropriate with the denominations of the currency! You typically can\u0026rsquo;t have 0.001 of a US dollar, or 0.5 Japanese Yen, for example.\n  2. Floating-point errors    This is a general problem with most computing languages, and you can replicate this one yourself with the following code:\necho 3.14159265 - 3.14; You\u0026rsquo;ll find that PHP does something strange here and returns the value 0.0015926500000001.\nWhy it does this is explained at length here:\nhttps://floating-point-gui.de/\nBut, in a nutshell, arithmetic in computers done in base 2 rather than base 10, which can lead to some rounding errors on decimals like these ones.\nGenerally, this issue only arises occasionally when dealing with decimals - however, it\u0026rsquo;s always important to be aware of this possibility. Once again, consider rounding your values or designing the question to avoid this situation entirely.\n 3. Randomised values don\u0026rsquo;t make sense    When writing a static question, the numbers chosen generally follow a number of implicit assumptions, such as:\n If a question involves finding GCD/LCM of 2 numbers, the values given should be different When calculating an answer in currency, the final answer should be in the proper denominations (i.e. not having 0.001 USD, or 0.5 JPY).  Some of these are harder to deal with - such as picking 3 random points on a grid and making sure they form a triangle, not a line. The randomisation methods covered in 4.1. Introducing \u0026lsquo;Randomness\u0026rsquo; may be able to help out with this.\nIf you forget to check for these conditions when randomising your values, then often you end up with a question that either sounds weird, or no longer assesses what was originally intended:\n The aim in the above question is for students learn how to calculate distance when several speeds are given - but this does not apply if the speeds given are the same!\n  4. Not enough Randomisation    Questions should involve enough randomisation so that the questions generated don\u0026rsquo;t look all the same.\nThe second time a student sees the same dynamic question, we want to be confident that the calculations used last time cannot be used to solve the question.\n Note: As said in section 1, the order of solutions is randomised by default; this does not count as \u0026lsquo;randomisation\u0026rsquo; in a dynamic question.\n As a rule of thumb, it would be good to have at least 20 possible variations of your question. More randomisation is better, but be careful of the next issue:\n 5. Questions varying too much in difficulty    When randomising your numbers, some values might lead to a question that requires much harder calculations or even an entirely different solving method.\nFor example, consider finding the roots of f(x) = x^2 + 2x + 1, compared to f(x) = x^2 + 2x + 2!\nThe former can be factorised and solved immediately, whereas the other requires the quadratic formula and also has complex roots - overall much harder to solve.\nThis ties in with the above point about \u0026lsquo;implicit assumptions\u0026rsquo; as well. If you\u0026rsquo;re giving side lengths and angles of a triangle for a question about the cosine rule, make sure you avoid angles like 90˚ - this would mean they could use Pythagoareas' Theorem instead!\n 6. (MCQs) Issues with Answer Options    Multiple-choice questions have additional considerations due to the fact that you need to provide random wrong answers.\nOn one hand, the answers you give for multiple-choice questions can\u0026rsquo;t be completely random - otherwise the correct answer can be plainly obvious:\nOn the other hand, care is also needed when giving wrong answers that relate to the question - otherwise your wrong answers might be duplicates of each other, or even a correct solution themselves!\nThis is an issue even if it rarely occurs, as thousands of students are going to be seeing these questions, and it\u0026rsquo;s likely that they\u0026rsquo;ll come across the problem at least once.\nA few techniques in 4.1. Introducing \u0026lsquo;Randomness\u0026rsquo; can help you avoid getting duplicate values, but once again, the best option is to design your question such that it never comes across this issue in the first place.\n"},{"id":16,"href":"/2-design/guidelines/","title":"2.2. General Design Guidelines","parent":"2. Dynamic Question Design","content":"Apart from the issues with code in a dynamic question, there also a few general things to consider when designing and writing a question. The guidelines below can be split into 3 main groups, and in summary they are to:\n Consider Context: What the question is used for Consider Formatting: How the question is viewed Consider Wording + Detail: How the question will be understood  While I\u0026rsquo;ll go into detail for each part, the key idea above all of this is to use common sense! When in doubt, place yourself in the position of a student answering these questions, and whether you would find them confusing or unfair.\n2.2.1. Context    It\u0026rsquo;s important to take into account how the questions you\u0026rsquo;re writing will be used - this will help with a lot of design decisions you make.\nJust a bit of background on the idea for these dynamic questions:\nCurrently, the idea is that they\u0026rsquo;ll be used in admissions tests for students from Year 7 to 10.\nFor each year group, the test will have 30 question \u0026lsquo;slots\u0026rsquo;, each reserved for a particular topic. Each question slot will be filled with 1 of the 3 dynamic questions for that topic.\n The bottom line is that a lot of randomisation will be involved when dynamic questions are used to generate assessments and tests. As a result, it\u0026rsquo;s important to ensure that questions are consistent in difficulty and style so that we can maintain fairness of testing.\nWith that said, here are a few guidelines that will help you with designing these questions:\n  Consider the target audience of your questions, and set bounds for the difficulty of your questions.\n  Searching for topics with a specific year group or key stage can be very useful in understanding what students of a particular age might be learning. You might even find some example questions that you can use for inspiration!\n BBC Bitesize is generally a good resource to see what level of questions you want to ask - there are many other good websites out there as well!\n   The bounds you set might involve topics to avoid or terminology that is too advanced. This helps keep the difficulty of your questions consistent.\n For example, with terminology, it may be more appropriate to ask for \u0026ldquo;area under a graph\u0026rdquo; rather than \u0026ldquo;solving a definite integral\u0026rdquo;.      Try to generate values easy to work with, and keep descriptions short and succinct.\n  Consider the solving conditions of your questions:\n  Students are generally going to be allowed calculators, but questions should be solvable without one. The main focus isn\u0026rsquo;t the calculation, but rather the method of approaching and solving a problem.\n Simpler calculations will also make it easier to check your own questions!\n   Students will be given on average 2 minutes per question - this includes the time involved in reading and understanding the content. Questions should be clear and solution process generally should not be longer than a minute.\n The main work involved with solutions should also be relevant to the question itself - unfortunately, with the question below, the time it takes to count values would be more important than understanding the what the mode is!\n       Use terms and contexts that can be understood, regardless of nationality or (pop) culture.\n  We\u0026rsquo;d like the tests to be applicable to all students around the world, so you may need to consider doing the following:\n  Define terms that are specific to a particular country/area.\n For example, not everyone will immediately understand the relationship between \u0026lsquo;nickels\u0026rsquo;, \u0026lsquo;dimes\u0026rsquo; and \u0026lsquo;quarters\u0026rsquo; when used in a question, as these are specific to the US currency.\n   Provide relatable context in questions (where applicable).\n Not everyone will understand that \u0026ldquo;Yasuo\u0026rsquo;s Q does 20 + 100% AD damage at level 1\u0026rdquo;! It\u0026rsquo;s fine to add references for \u0026lsquo;flavour\u0026rsquo; in your questions, but they shouldn\u0026rsquo;t impede the process of solving the question.\n        2.2.2. Formatting    The guidelines below involve using the tools available to present your questions in a format that\u0026rsquo;s consistent and easily understandable.\n Use AsciiMath on relevant numbers and any algebraic expressions.\n These help emphasise important parts of the question, and keep the appearance of expressions consistent.    Consider including a diagram when it makes wording the question much easier.\n  Usually happens with questions on geometry. If describing the question feels too lengthy or complicated, then a diagram can help students understand the question much faster.\n  Note that there are exceptions to this rule - in some cases, you may want to intentionally avoid using a diagram as part of the difficulty of the question, so that students will need to visualise the situation themselves.\n   Important Note: Please keep in mind that your diagram should be clear and used by your question! Try to keep diagrams simple and small; they should be no bigger than 500px by 500px.\n    2.2.3. Wording + Detail    These guidelines are about how question text and solutions can be written to make it more likely that your questions are understood and solved as intended by students.\n Emphasise important or unusual information in questions - especially if it\u0026rsquo;s about the form of your answer.\n  A fair question should not be aiming to \u0026lsquo;catch out\u0026rsquo; someone for misreading slight details.\n  If a question is open-answer, make sure to note the unit you want students to answer in (if applicable), or how many significant figures to round to.\n Note the specific way the question below asks for the answer, regarding both units and rounding - this makes it clear for students how to provide their answers in the open-response format.\n(Note also that the question gives a specific conversion between inches and cm for students to use, respecting the context; on the other hand, 12 inches to 1 foot is presumed knowledge of the imperial system.)\n   Try to be consistent on how you achieve emphasis - specific question wording, the order in which you give information, or by bolding text.\n    Solutions should describe both the general solving process and perform the specific calculation to arrive at the answer.\n  These solutions will be read by the students themselves when doing practice, so it\u0026rsquo;s important they can be understood from the perspective of someone who cannot answer the question.\n  Ideally, students should be able to figure out why they answered incorrectly after they read the solution. Step-by-step calculations help a lot - you should do these for the important or complicated parts of your question.\n As an example, consider the following statement in a solution:\n\u0026quot;The amount for expenses is 15% of $850, so $722.5 remains.\u0026quot; Multiple steps are done in a single statement, and it\u0026rsquo;s also never shown or explained where the \u0026lsquo;$722.5\u0026rsquo; value came from.\nNote that in some cases, this is fine - if it is only a small part of the question and other complex steps are involved, we can assume students will fill in the gaps.\nHowever, for other cases, we\u0026rsquo;d probably want to include more detail. First a calculation to first show 100% - 15% = 85% of the money is not spent, and so $850 * 85% = $722.50 remains.\n   With multiple-choice questions, you may need to explain why other multiple-choice options were wrong.\n This applies to questions where the correct option doesn\u0026rsquo;t imply the other options are wrong - something like \u0026ldquo;select the following number that is prime\u0026rdquo;, for example.\nJust because one option has a prime number, it doesn\u0026rsquo;t automatically mean the other numbers won\u0026rsquo;t be prime!      "},{"id":17,"href":"/3-general-examples/","title":"3. Coding Examples","parent":"About","content":"Right - after going all the design talk above, I should probably start talking about the actual code itself and how the design principles above can be used in practice.\nIn this section, I\u0026rsquo;ll go through several specific examples of code used in actual questions, and also look at ways of solving common issues that might arise.\nThe things covered will include:\n Example Question 1: Finding volume of a sphere, given its SA Example Question 2: Simplifying an inequality Specific ways of solving the common issues listed in section 2.1.  There\u0026rsquo;ll be a bunch of PHP code snippets here, so this is where some knowledge of PHP syntax would help with understanding the content more quickly. If possible, you might also want to try running some of the code yourself and experimenting with it to see what happens!\nIf anything doesn\u0026rsquo;t work, feel free to contact me.\n On the topic of running PHP code, the following site is a good place to directly test these snippets yourself:\nhttps://replit.com/languages/php_cli\nMake sure to encase your code in the \u0026lt;?php and ?\u0026gt; tags for it to run properly!\n"},{"id":18,"href":"/3-general-examples/examples/1/","title":"3.1. Example Question 1","parent":"3. Coding Examples","content":"Context: Volume of sphere given its SA This is an open-answer question that involves giving the surface area (SA) of a sphere, and asking for its volume.\nThe general mathematics behind this is fairly straightforward. We can use the two formulas for the volume and surface area of a sphere, given radius \\(r\\):\n\\[ \\begin{aligned} SA \u0026= 4 \\pi r^2 \\\\ V \u0026= {4 \\pi r^3 \\over 3} \\\\ \\end{aligned} \\]\nThe solution to this is to rearrange the top equation in terms of the radius \\(r\\):\n\\[ r = \\sqrt{{SA \\over 4 \\pi}} \\]\nAnd then substitute the resulting value into volume:\n\\[ V = {4\\pi \\over 3} \\cdot \\bigg( \\sqrt{{SA \\over 4 \\pi}} \\bigg)^3 \\]\nThis looks a bit messy - but in fact, there's a pretty neat way to go about generating values for this question!\nApproach The first thing to note is the formulas for SA and Volume: If radius is a whole number, surface area and volume may be expressed exactly in terms of pi.\nSo rather than generating surface area or volume, what we could instead do is generate a value for radius, and calculate the other resulting values.\nThis would not only make the question neater and clearer, but also much easier to code - we wouldn't have to deal with rounding decimals or finding exact values!\nWhen writing questions, the randomised values don't necessarily have to be what's shown to the student. You could go backwards instead - generate the answer first, and calculate the values to display!\nIn this case, we generated a value in the middle (the radius) and used that to calculate both the SA (displayed to the viewer) and the volume (the solution).\nThere's no predefined way to go about doing this - you can generate the values however you want, but do aim to keep the values in a question simple (as noted in section 2.2.1), as it tends to make your questions clearer and easier to code!\n One other thing to note is the formula for the answer (volume): If radius is divisible by 3, the value of \\(r^3\\) will cancel out with the denominator. We have two options here - either only generate radius values that are divisible/indivisible by 3, or add an extra check to see if we need to simplify the fraction. I'll go with the latter option in this case to show you how it can be done.\nIt's also important to note that we should specify how we want the answer to be formatted! Generally, we could choose to either ask for the value exactly in terms of \\(\\pi\\), or rounded to some number of decimal places.\nIn this case, I went with the former option as it requires students to think more carefully about the formulas involved (and it was also easier to code :P).\nCoding the Question First, as noted above, let's make our random value the radius of the sphere - since volume is based on radius cubed, we should be careful not to let the random values vary too much:\n$radius = mt_rand(5, 20); From $radius, we can calculate the values of sphere's SA and volume, in terms of pi.\nSA is straightforward, but volume needs to deal with the case where the fraction can be simplified:\n$sa = 4 * pow($radius, 2); // in terms of pi  $vol_numer = 4 * pow($radius, 3); // numerator, in terms of pi if ($vol_numer % 3 == 0) { $vol = $vol_numer / 3; } else { $vol = \u0026#34;$vol_numer/ 3\u0026#34;; } Here, we've not actually stored the real values of SA or volume in any of the variables. Instead, The values of $sa and $vol are set up so that we can display them properly in strings that use AsciiMath - e.g. `$vol pi`.\nFor example, if $radius was set to 5, then $vol would be the string \u0026quot;500 / 3\u0026quot;.\nWe could set this in questions as `$vol pi`, which would be `500 / 3 pi` and rendered as \\({500 \\over 3} \\pi\\).\n Next, generate the question text, making sure to include AsciiMath where appropriate, as well as how the answer should be formatted:\n$question_text = \u0026#34;A sphere has surface area `$sapi`. What is its volume? Express your answer in exact terms with `pi`.\u0026#34;; Finally, we can express our answer and generate our solution text. I've separated out the solution text into multiple lines through \u0026lt;br\u0026gt;, and have formatted the solution to look similar to how it would be displayed.\n$answer = \u0026#34;`$volpi`\u0026#34;; $solution = \u0026#34;The formula for calculating the surface area and volume of a sphere both depend on radius: \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`SA = 4 pi r^2` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`V = 4/3 pi r^3` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;We can solve for radius by rearranging the formula for surface area, and substitute this into the formula for volume: \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`r = sqrt((SA) / (4pi)) = sqrt(($sapi) / (4pi)) = $radius` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;Therefore, `V = 4/3 pi r^3 = 4/3 pi ($radius)^3 = $volpi`.\u0026#34;; And finally, echo the question text itself (since this is the question box):\necho $question_text; Final Question Code When coding questions, I tend to put all the random generation together in the question box - this makes it clear where all the variables are coming from and how they're generated.\nTherefore, the code in the question box:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026lt;?php $radius = mt_rand(5, 20); $sa = 4 * pow($radius, 2); // in terms of pi $vol_numer = 4 * pow($radius, 3); // numerator, in terms of pi if ($vol_numer % 3 == 0) { $vol = $vol_numer / 3; } else { $vol = \u0026#34;$vol_numer/ 3\u0026#34;; } $question_text = \u0026#34;A sphere has surface area `$sapi`. What is its volume? Express your answer in exact terms with `pi`.\u0026#34;; $answer = \u0026#34;`$volpi`\u0026#34;; $solution = \u0026#34;The formula for calculating the surface area and volume of a sphere both depend on radius: \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`SA = 4 pi r^2` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`V = 4/3 pi r^3` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;We can solve for radius by rearranging the formula for surface area, and substitute this into the formula for volume: \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`r = sqrt((SA) / (4pi)) = sqrt(($sapi) / (4pi)) = $radius` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;Therefore, `V = 4/3 pi r^3 = 4/3 pi ($radius)^3 = $volpi`.\u0026#34;; echo $question_text; // echo the actual question text ?\u0026gt;   The code in the answer and solution is therefore very short:\n1 2 3  \u0026lt;?php echo $answer; ?\u0026gt;   1 2 3  \u0026lt;?php echo $solution; ?\u0026gt;   Results Viewing the question several times gives us different results, as can be seen here:\nradius = 5   radius = 18   radius = 20    "},{"id":19,"href":"/3-general-examples/examples/2/","title":"3.2. Example Question 2","parent":"3. Coding Examples","content":"Context: Simplifying an inequality We'll be looking at an open-answer question that involves giving an inequality with a single variable, and asking for the simplified form of the inequality.\nThe inequality we'll give should be of one of the forms (where the boxes represent some random numbers):\n\\[ \\begin{aligned} \\Box (\\Box x + \\Box) \u0026\\Box \\end{aligned} \\]\nSo an example question and solution might look something like this:\n\\[ \\begin{aligned} \\text{Question:} \u0026 \\\\ \u0026\u0026 5(4x + 8) \u0026We can use algebra to figure out the answer in terms of the random values. Naming them as \\(A, B, C, D\\), note that:\n\\[ \\begin{aligned} A(Bx + C) \u0026The same is true for the opposite inequality where \\(\\) is used.\nFrom the above calculations, there are several things to note here:\n We can control the final inequality so that we always have an integer on the RHS - i.e. \\(x for some integer \\(E\\). We just need to choose a suitable value for \\(D\\) so that \\(D - AC\\) is a multiple of \\(AB\\).\n We can do this by generating a random value for \\(A, B, C\\) and \\(E\\) for the answer \\(x . From this, we can figure out the value of \\(D\\) such that \\((D - AC) \\div AB = E\\), i.e. \\(D = E(AB) + AC\\). By ensuring that our answer only involves integers, it makes writing the solution a lot easier, while keeping the difficulty of the question a lot more consistent.    The solution process doesn't change depending on whether the inequality is less than (\\() or greater than (\\(\\)), so we can generate that separately.\n  Coding the Question As noted in point 1 above, we can generate the values \\(A, B, C, E\\) (used for the answer), and the sign randomly. From the generated values, we can calculate what \\(D\\) should be.\nSo let's generate some suitable values for the variables:\n$A = mt_rand(2, 9); $B = mt_rand(2, 9); $C = mt_rand(2, 9); $E = mt_rand(2, 9); $sign = mt_rand(0, 1) ? \u0026#34;\u0026gt;\u0026#34; : \u0026#34;\u0026lt;\u0026#34;; Note: The final line generating $sign uses the ternary operator. If mt_rand(0, 1) returns 0, then the condition is false and $sign = \u0026quot;\u0026lt;\u0026quot;; otherwise the condition is true and $sign = \u0026quot;\u0026gt;\u0026quot;.  Then, we know that \\(D = E(AB) + AC\\), so we can calculate that directly:\n$D = ($E * $A * $B) + ($A * $C); Now we can use the values to generate our question text, making sure to explain how the answer should be formatted:\n$question_text = \u0026#34;Simplify the following inequality: `$A($Bx + $C) $sign$D`. \u0026#34; . \u0026#34;Your answer should be in the form `x $signA` for some value A.\u0026#34;; The values also allow us to generate our answer pretty easily:\n$answer = \u0026#34;`x $sign$E`\u0026#34;; The solution, on the other hand, is a bit more complicated, as we'll need to show step-by-step instructions (just like as seen in the example above with \\(5(4x + 8) ).\nTo do so, we'll need to calculate some of the intermediate values so that we can display them in the solution as well:\n$AB = $A * $B; $AC = $A * $C; $D_AC = $D - $AC; $solution = \u0026#34;Expand LHS: `$ABx + $AC$sign$D` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`=\u0026gt; $ABx $sign$D- $AC` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`=\u0026gt; x $sign($D_AC)/$AB` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`=\u0026gt; x $sign$E`\u0026#34;; And finally, echo the question text itself (since this is the question box):\necho $question_text; Final Question Code The final code for the question is as follows. A few comments have been added, and lines have been moved around to make the code easier to read.\nIn the question box (again, all the generation is here, so that it's easier to see where values come from):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026lt;?php // set up inequality in the form of A(Bx+C)\u0026gt;D or A(Bx+C)\u0026lt;D, with answer x\u0026gt;E or x\u0026lt;E $A = mt_rand(2, 9); $B = mt_rand(2, 9); $C = mt_rand(2, 9); $E = mt_rand(2, 9); $sign = mt_rand(0, 1) ? \u0026#34;\u0026gt;\u0026#34; : \u0026#34;\u0026lt;\u0026#34;; $D = ($E * $A * $B) + ($A * $C); // question text $question_text = \u0026#34;Simplify the following inequality: `$A($Bx + $C) $sign$D`. \u0026#34; . \u0026#34;Your answer should be in the form `x $signA` for some value A.\u0026#34;; // generate answer + solution $AB = $A * $B; $AC = $A * $C; $D_AC = $D - $AC; $answer = \u0026#34;`x $sign$E`\u0026#34;; $solution = \u0026#34;Expand LHS: `$ABx + $AC$sign$D` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`=\u0026gt; $ABx $sign$D- $AC` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`=\u0026gt; x $sign($D_AC)/$AB` \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;`=\u0026gt; x $sign$E`\u0026#34;; echo $question_text; ?\u0026gt;   And now the answer and solution boxes require very little code, as all the work has been done above:\n1 2 3  \u0026lt;?php echo $answer; ?\u0026gt;   1 2 3  \u0026lt;?php echo $solution; ?\u0026gt;   Results The question itself has \\(8^4 = 4096\\) variations as we've randomised the values of \\(A, B, C, E\\)! Here are 3 examples of how the questions look like when shown:\nExample 1   Example 2   Example 3    "},{"id":20,"href":"/3-general-examples/solving-issues/","title":"3.3. Solving Common Issues","parent":"3. Coding Examples","content":"Here, I\u0026rsquo;ll go in a little more in-depth into how the common issues listed in section 2.1 can arise from code, and what can be done to the code itself to solve these issues.\nThe explanations for each question can be a bit lengthy, so I\u0026rsquo;ve split each question into a page of its own:\n   3.3.1. INFs and unrounded answers     3.3.2. Floating-point errors     3.3.3. Weird random values     3.3.4. Insufficient randomisation     3.3.5. Inconsistent difficulty     3.3.6. (MCQs) Inappropriate choices     "},{"id":21,"href":"/3-general-examples/solving-issues/1/","title":"3.3.1. INFs and unrounded answers","parent":"3.3. Solving Common Issues","content":"Here's the example that was shown back in section 2.1:\nIn the above case, the formula for the volume of a sphere was directly used to calculate and display the answer. Let's look at the code involved:\n$radius = mt_rand(5, 15); $answer = 4 / 3 * pi() * ($radius ** 3); While this seems fine at first, using pi() in calculations will give you messy numbers, and PHP will attempt to respond with as much precision as it can - giving us a number with 10 or so decimal places. Oops!\nGenerally, there are 2 approaches to solve this problem:\n Ask for a rounded solution - either to a certain number of decimal places or significant figures. Express the solution exactly - in this case, in terms of \\( \\pi \\).   Option 1: Asking for a Rounded Solution This one is the simple approach and works alright for most cases.\nIn the above case, we could add the following text to the question: \u0026quot;Round your answer to 2 decimal places (if necessary).\u0026quot;\nTo get our rounded answer in code, we can simply add a slight modification to the answer calculation:\n$answer = round(4 / 3 * pi() * ($radius ** 3), 2); So in a case where $radius is set to 10 like above, we'd get an answer of 4188.79.\nThe solution involves a bit more work, though - you should also be showing the process of rounding the value. For example:\n$answer_round4 = round(4 / 3 * pi() * ($radius ** 3), 4); $solution_text = \u0026#34;`(4/3) pi r^3 = (4/3) pi ($radius)^3 = $answer_round4... approx $answer.\u0026#34; Here, I've defined an extra variable that shows the answer rounded to a greater number of decimal places.\nThis will give a clear, step-by-step solution - for example, if $radius = 10:\n\\[ {4 \\over 3} \\pi r^3 = {4 \\over 3} \\pi (10)^3 = 4188.7902... \\approx 4188.79. \\]\nBe careful when you use this method of showing the working out!\nIn cases where the answer does not need to be rounded, you might end up showing something like this:\n\\[ 6.25 \\cdot 6 = 37.5... \\approx 37.5 \\]\nThe above solution doesn't make sense - it rounds for no reason and says 37.5 is approximately equal to... itself?\nBecause of this, it's important to first check whether your answer actually needs to be rounded. One way of doing this is by comparing the rounded answer to itself, like this:\nif (round($answer, 2) == $answer) { // do not show rounding } else { // do show rounding }   Option 2: Expressing the Solution Exactly Meanwhile, in the case of option 2, you'll want to express this as a fraction that uses \\( \\pi \\).\nA basic way of including the fraction would be to do this:\n$answer_numer = 4 * ($radius ** 3); # Numerator of the fraction $answer_denom = 3; # Denominator of the fraction  $answer = \u0026#34;`($answer_numer/ $answer_denom) pi`\u0026#34;; In the case where $radius is set to 10, like above, you would end up with the following answer:\n\\[ {4000 \\over 3} \\pi \\]\nHowever, there's a bit of a problem here - what if the radius is divisible by 3? You'll end up displaying a fraction that's not in its simplest form. For example, if $radius was 3, then you would end up with the following:\n\\[ {108 \\over 3} \\pi \\]\nThis isn't very good - it should be \\(36 \\pi\\) instead!\nBecause of this, you'll want to express your answer differently whenever the numerator is divisible by 3.\nOne way of doing this would be as follows:\n$answer_numer = 4 * ($radius ** 3); # This calculates 4r^3, the numerator  if ($answer_numer % 3 == 0) { # if divisible by 3, display as a whole number  $answer_coef = $answer_numer / 3; $answer = \u0026#34;`$answer_coefpi`\u0026#34;; } else { # otherwise, display as a fraction  $answer = \u0026#34;`($answer_numer/ 3) pi`\u0026#34;; } Now, in a case where $radius is divisible by 3, you'll be showing a whole number rather than a fraction.\n"},{"id":22,"href":"/3-general-examples/solving-issues/2/","title":"3.3.2. Floating-point errors","parent":"3.3. Solving Common Issues","content":"Floating-point errors, in summary, are basically where the computer makes tiny errors when doing arithmetic with decimals.\nA rather specific example was given previously, but note that these issues can occur with simple decimal values as well. You can try this yourself:\nGo to repl.it/languages/php_cli, and put this into the interpreter to see what you get:\n\u0026lt;?php echo 0.1 + 0.2 - 0.3; ?\u0026gt; Rather than 0, we get a value that's very close to it - 5.5511151231258E-17!\nIn general, dealing with decimals in code is not nice - you always have to consider cases where rounding is necessary, and it takes a lot of extra work to make sure that the solutions display properly (as noted in the previous page).\nHowever, if the question explicitly requires doing calculations with non-whole numbers, then you have a few options for dealing with this.\n Round the values to some suitable number of places after your calculations. This can be done in cases where you have an upper bound on how much precision you actually require.\n Multiply the values by some power of 10 to turn them into whole numbers first. This is particularly helpful for cases where you're dealing with money (dollars and cents), or other things with fixed denominations. It can be helpful to work in terms of the smallest unit - because PHP is 100% accurate as long as whole numbers are involved.\n   -- Incomplete Section Probably some example? I'll get around to this when I come across a particularly compelling use case\n "},{"id":23,"href":"/3-general-examples/solving-issues/3/","title":"3.3.3. Weird random values","parent":"3.3. Solving Common Issues","content":" -- Incomplete Section --\n  The aim in the above question is for students learn how to calculate distance when several speeds are given - but this does not apply if the speeds given are the same! -- "},{"id":24,"href":"/3-general-examples/solving-issues/4/","title":"3.3.4. Insufficient randomisation","parent":"3.3. Solving Common Issues","content":" -- Incomplete Section --\n **Note:** As said in section 1, the order of solutions is randomised by default; this does not count as 'randomisation' in a dynamic question. As a rule of thumb, it would be good to have at least 20 possible variations of your question. More randomisation is better, but be careful of the next issue: -- "},{"id":25,"href":"/3-general-examples/solving-issues/5/","title":"3.3.5. Inconsistent difficulty","parent":"3.3. Solving Common Issues","content":" -- Incomplete Section --\n "},{"id":26,"href":"/3-general-examples/solving-issues/6/","title":"3.3.6. (MCQs) Inappropriate choices","parent":"3.3. Solving Common Issues","content":" -- Incomplete Section --\n On the other hand, care is also needed when giving wrong answers that relate to the question - otherwise your wrong answers might be duplicates of each other, or even a correct solution themselves! This is an issue even if it rarely occurs, as thousands of students are going to be seeing these questions, and it's likely that they'll come across the problem at least once. A few techniques in [4.1. Introducing 'Randomness'](#41-introducing-randomness) can help you avoid getting duplicate values, but once again, the best option is to design your question such that it never comes across this issue in the first place. -- "},{"id":27,"href":"/4-advanced-examples/","title":"4. More Coding Examples","parent":"About","content":"In this section, I\u0026rsquo;ll go over some more complex examples of questions. These ones will make use of JavaScript (JS) and the JSXGraph library in order to form dynamic diagrams/graphs for the question and/or solution.\nJust a note for prerequisites:\nThe following examples will additionally require understanding of the JavaScript language.\nThere are quite a few guides out there for learning about JS, but if you want to dive straight into making questions, I recommend trying to go through this guide first and searching up things along the way. While PHP and JS are by no means similar, programming concepts (like conditionals and loops) translate fairly well; in general, it\u0026rsquo;ll be easier to pick up the language once you\u0026rsquo;ve seen a few examples of how it\u0026rsquo;s used.\nI\u0026rsquo;ll try to explain the lines that appear in the code line-by-line, but if there are things that really don\u0026rsquo;t seem clear, please feel free to send me a message.\n Contents    Including JS JS Libraries A Simple JSXGraph Example Using JSXGraph Through PHP     The bit below provides a high-level kind of overview on how you can include JS code and libraries in PHP, with a short example JSXGraph demo. It\u0026rsquo;ll give you a better understanding of how the code actually does what it does, and might help you with debugging.\n Including JS    As noted in the intro about how echo works with tags, PHP is overall\u0026hellip; kinda jank. You can use echo on whatever you want, and it\u0026rsquo;ll come out on the other end treated as HTML by a browser.\nSeparately, another thing to note is that in order to include a JS script in a webpage, you place the script inside \u0026lt;script\u0026gt; tags in the page\u0026rsquo;s HTML.\nFor example:\n\u0026lt;script\u0026gt; alert(\u0026#34;Hello!\u0026#34;); \u0026lt;/script\u0026gt; If you put the above code into the HTML of a website, the page would load the JS script inside those tags, and then display a browser alert.\nI\u0026rsquo;ve included that exact script on this page to demonstrate how it would work.\n So now, combining the two things we\u0026rsquo;ve learnt together: What if we do the following in PHP?\n$script = \u0026#34;\u0026lt;script\u0026gt; alert(\u0026#39;Hello!\u0026#39;); \u0026lt;/script\u0026gt;\u0026#34; echo $script; Yep - the same thing happens. The PHP runs on the server-side, and puts this into the HTML. Your browser then receives this HTML, finds the \u0026lt;script\u0026gt; tags, and runs whatever JS code is inside them.\nWhile this seems like a bit of a security issue, there are a few safety features in how your browser runs this code - enough so that it generally won\u0026rsquo;t be able to do much harm.\nThis thread on StackExchange does a much more thorough job of explaining how it works, if you\u0026rsquo;re interested in reading more about why this is safe.\n  JS Libraries    HTML \u0026lt;script\u0026gt; tags aren\u0026rsquo;t limited to including code within the tags. You can specify an argument src inside the tag to pull code off the internet, and run that instead.\nThis is exactly what we do to include the JS code (as well as the CSS) of the JSXGraph library - the specific HTML that\u0026rsquo;s used is:\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; charset=\u0026#34;UTF-8\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraphcore.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraph.css\u0026#34; /\u0026gt; If you try going to the site in the script\u0026rsquo;s src attribute, you\u0026rsquo;ll see the actual library code that\u0026rsquo;s being referenced:\nhttps://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraphcore.js\nAs you can see, the code on that site is basically unreadable. That\u0026rsquo;s because it\u0026rsquo;s been \u0026ldquo;minified\u0026rdquo; - all the comments and extra spacing have been removed, while variables have been shortened as much as possible. This isn\u0026rsquo;t for security, but rather so that sites using it load quicker.\nAgain, here\u0026rsquo;s a site that better explains JS minification, if you\u0026rsquo;re interested.\n Another thing to note: A script can contain either an src reference or your own code, but not both. This means that the following will not work as intended:\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; charset=\u0026#34;UTF-8\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraphcore.js\u0026#34;\u0026gt; alert(\u0026#34;Hello!\u0026#34;); \u0026lt;/script\u0026gt;    A Simple JSXGraph Example    Finally, let\u0026rsquo;s go through a simple example of including a JSXGraph diagram on a question. I\u0026rsquo;ll use the example of including a drawing panel at this link:\nhttps://jsxgraph.org/wiki/index.php?title=Howto_include_JSXGraph_into_web_pages#Include_a_drawing_panel_into_the_HTML\nAnd then I\u0026rsquo;ll use the example of creating a circle on the drawing panel:\nhttps://jsxgraph.org/wiki/index.php/Circle\nLet\u0026rsquo;s first begin by including the scripts required to load the JSXGraph library (this will be needed for every question that uses the library):\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; charset=\u0026#34;UTF-8\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraphcore.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraph.css\u0026#34; /\u0026gt; Next, we\u0026rsquo;ll make an actual \u0026lt;div\u0026gt; element where the drawing box will be contained, and we\u0026rsquo;ll give it an id attribute \u0026quot;box\u0026quot;:\n\u0026lt;div id=\u0026#34;box\u0026#34; class=\u0026#34;jxgbox\u0026#34; style=\u0026#34;width:500px; height:500px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; Finally, we\u0026rsquo;ll include a similar script to the one shown in the circle example - remember to surround it with script tags!\n\u0026lt;script\u0026gt; // initialise board var b = JXG.JSXGraph.initBoard(\u0026#39;box\u0026#39;, {boundingbox: [-5, 5, 5, -5]}); // create two points var p1 = b.create(\u0026#39;point\u0026#39;, [0,0], {name: \u0026#39;A\u0026#39;, size: 4, face: \u0026#39;o\u0026#39;}); var p2 = b.create(\u0026#39;point\u0026#39;, [2,-1], {name: \u0026#39;B\u0026#39;, size: 4, face: \u0026#39;o\u0026#39;}); // create a circle passing through the two points above // note that instead of [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;], you could instead use the variable names [p1, p2] var circle = b.create(\u0026#39;circle\u0026#39;, [p1, p2], {strokeColor:\u0026#39;#00ff00\u0026#39;,strokeWidth:2}); \u0026lt;/script\u0026gt; The first line sets b (for board) to a plane with top-left coordinate (-5, 5) and bottom-right coordinate (5, -5). The argument box means that it\u0026rsquo;ll look for a \u0026lt;div\u0026gt; element with the id attribute box - in other words, the element we made earlier.\nThe following lines then call the b.create() function to draw things on the board:\n The first argument is the type (e.g. 'point' or 'circle') The second argument contains parameters specific to the shape, e.g. coordinates of a point, or the points for a circle to pass through The third argument contains general parameters, such as labels or colours - these are all optional and will have default values if not provided.  A few things in the example circle script on the website are\u0026hellip; outdated. A few things to note when using the library:\n When doing geometry, for best results, make a square \u0026lt;div\u0026gt; (where width and height are equal), and use a bounding box with equal x/y-ranges. createElement is no different from create - in fact, you\u0026rsquo;ll get a warning if you use the former. For elements like circles that require other points/shapes to be constructed, you can either use the variable (p1, p2), or name given to the shape (\u0026ldquo;A\u0026rdquo;, \u0026ldquo;B\u0026rdquo;). I recommend using the variable rather than the name, mainly because it\u0026rsquo;s much clearer.   If we call all of that, this is what we end up with - similar to the example!\n  // initialise board var box = JXG.JSXGraph.initBoard('box', {boundingbox: [-5, 5, 5, -5]}); // create two points var p1 = box.create('point', [0,0], {name: 'A', size: 4, face: 'o'}); var p2 = box.create('point', [2,-1], {name: 'B', size: 4, face: 'o'}); // create a circle passing through the two points above // note that instead of ['A', 'B'], you could instead use the variable names [p1, p2] var circle = box.create('circle', [p1, p2], {strokeColor:'#00ff00',strokeWidth:2});   Using JSXGraph Through PHP    Okay, but how do we add all of this in PHP? There\u0026rsquo;s a bunch of quotation marks in the code that might accidentally end the string early.\nTo include all this HTML and JavaScript code in a single PHP string, one thing we can use is something called a Heredoc.\nIt\u0026rsquo;s basically a string that, instead of uses quotation marks, uses \u0026lt;\u0026lt;\u0026lt;something to signify the start, and something; to signify the end (substitute whatever you want for that something). This allows us to put all of the code in quite easily and cleanly - in the case above, we would do this:\n$example_script = \u0026lt;\u0026lt;\u0026lt;DIAGRAM\u0026lt;script type=\u0026#34;text/javascript\u0026#34; charset=\u0026#34;UTF-8\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraphcore.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraph.css\u0026#34; /\u0026gt; \u0026lt;div id=\u0026#34;box\u0026#34; class=\u0026#34;jxgbox\u0026#34; style=\u0026#34;width:500px; height:500px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // initialise board var box = JXG.JSXGraph.initBoard(\u0026#39;box\u0026#39;, {boundingbox: [-5, 5, 5, -5]}); // create two points var p1 = box.create(\u0026#39;point\u0026#39;, [0,0], {name: \u0026#39;A\u0026#39;, size: 4, face: \u0026#39;o\u0026#39;}); var p2 = box.create(\u0026#39;point\u0026#39;, [2,-1], {name: \u0026#39;B\u0026#39;, size: 4, face: \u0026#39;o\u0026#39;}); // create a circle passing through the two points above // note that instead of [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;], you could instead use the variable names [p1, p2] var circle = box.create(\u0026#39;circle\u0026#39;, [p1, p2], {strokeColor:\u0026#39;#00ff00\u0026#39;,strokeWidth:2}); \u0026lt;/script\u0026gt; DIAGRAM; echo $example_script; And there you go - your first JSXGraph through PHP!\n"},{"id":28,"href":"/4-advanced-examples/examples/1/","title":"4.1. Example Question 3","parent":"4. More Coding Examples","content":"Context: Real-World Graphs This is an open-answer question that will use graphs to show a constant rate of exchange between two items.\nIn this case, the structure of the question will be something like this:\n Two farms, Farm A and Farm B, sell cherries at a constant rate per kilogram. The prices of these two suppliers are shown in the graph below.\n[a graph of 2 straight lines, \\(y = Ax\\) (labelled 'farm A') and \\(y = Bx\\) (labelled 'farm B') for some values \\(A  B\\)]\nLast month, a restaurant spent [$C] buying cherries from Farm A. How much would they have saved by buying from Farm B instead?\n Approach This question is solved in a pretty straightforward manner:\n Figure out the values of \\(A\\) and \\(B\\) from the graph (look at gradients) Figure out the number of kilograms of cherries bought: \\( {C \\over A} \\) Figure out the amount saved with each kilogram of cherries: \\( A - B \\) \\( \\text{[total saved]} = \\text{[kilograms of cherries bought]} \\times \\text{[amount saved per kilogram]} = {C \\over A} \\times (A - B)\\).  The maths is fairly simple here - and we can ensure the answer is always a whole number by making \\(C\\) some multiple of \\(A\\).\nThe difficult part here is making the graph - and this is where using JSXGraph comes in.\nIn this case, with our diagram, we want lines on an axes - and thankfully, the JSXGraph library provides a pretty intuitive way of doing this.\nThe JSXGraph documentation has a lot of information about the different things you can put onto a diagram. It can be found here: https://jsxgraph.org/docs/index.html\nIn this case, some useful links to look at would be:\n For the axes, the board object itself: https://jsxgraph.org/docs/symbols/JXG.Board.html For the lines, a 'functiongraph': https://jsxgraph.org/docs/symbols/Functiongraph.html  You might also see that there's documentation for a 'line' object - however, I won't be using it in this case because I want to demonstrate the use of a Functiongraph (which is a lot more flexible).\n Coding the Question Let's get started on the variables we can randomise first - A, B, and C. There are a few explicit restrictions on our randomisation:\n A must be greater than B A must be a factor of C  However, is this all? Another thing to note is that some values of A or B are much easier to solve for.\nConsider a graph where the axes are marked in increments of 10 - the gradient of the graph \\(y = 20x\\) would be much easier to find compared to \\(y = 27x\\).\nBecause of this, in order to make difficulty consistent, I'll keep the values of A and B divisible by 5. We can randomise this and also generate our answer directly:\n// Cost of 1kg cherries for farm A and farm B $A = mt_rand(5, 10); $B = mt_rand(2, $A - 2); // B always smaller than A  // make $A and $B divisible by 5 $A *= 5; $B *= 5; // Kilos of cherries bought $kilos_bought = mt_rand(4, 9); // Find difference between amount spent at farm A vs farm B $spentA = $A * $kilos_bought; $spentB = $B * $kilos_bought; $answer = $spentA - $spentB; As you can see, the maximum range of the variable $B is decided by $A to ensure it is always smaller. We also multiply their values by 5 at the end so that they're always divisible by 5.\nMeanwhile, instead of randomly generating C (or rather, $spentA in this case), I've instead generated $kilos_bought as its own variable, so that $spentA is always some multiple of $A. It also allows us to calculate the answer very clearly.\nNext comes the question text - in this case, I'll add in an extra \u0026lt;div\u0026gt; element at the end, which is where the JSXGraph diagram will come in.\nWhen making the div element, a few things to note about the attributes:\n The id attribute can be anything you want - this will be used in your code as well. The class attribute must be jxgbox - this is required for the JSXGraph library to work with it. The style attribute must include the width and height as you see below to display properly. I recommend using equal width and height; 400px is generally big enough.   $question_text = \u0026#34;Two farms, Farm A and Farm B, sell cherries at a constant rate per kilogram. The prices of these two suppliers are shown in the graph below. \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;Last month, a restaurant spent `$$spentA` buying cherries from Farm A. How much would they have saved by buying from Farm B instead? \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;\u0026lt;div id=\u0026#39;graph\u0026#39; class=\u0026#39;jxgbox\u0026#39; style=\u0026#39;width:400px; height:400px\u0026#39;\u0026gt;\u0026lt;/div\u0026gt;\u0026#34;; And also the solution text - I've defined an extra variable $AB_diff as the difference between $A and $B in order to show the calculations in the middle. Note the use of two dollar signs for currencies - $$A becomes $5, for example!\n$AB_diff = $A - $B; $solution = \u0026#34;Looking at the graph, Farm A charges `$$A` per kilogram of cherries, while Farm B charges `$$B` per kilogram of cherries. \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;The restaurant spent `$$spentA` buying cherries from Farm A, so they bought `$spentA/ $A= $kilos_bought` kilograms of cherries. \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;They would save `$$A- $$B= $$AB_diff` per kilogram of cherries bought from farm B. \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;Therefore, by buying from farm B instead, they would have saved `$$AB_difftimes $kilos_bought= $$answer` dollars in total.\u0026#34;; Now, to include the actual diagram in the question, we'll need to include JS code that uses the JSXGraph library.\nAs explained in the previous page, I'll use a Heredoc to contain the relevant scripts - it should be something like this:\n$script = \u0026lt;\u0026lt;\u0026lt;SCRIPT// HTML to include the JSXGraph Library \u0026lt;script type=\u0026#34;text/javascript\u0026#34; charset=\u0026#34;UTF-8\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraphcore.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraph.css\u0026#34; /\u0026gt; // JS Code for the diagram goes here! \u0026lt;script\u0026gt; // your code \u0026lt;/script\u0026gt; SCRIPT;  The first two \u0026lt;script\u0026gt; and \u0026lt;link\u0026gt; tags are used to include the JSXGraph library; these will always be included.\nThe next bit is what decides the things that appear in the diagram.\nTo include the randomised variables from PHP, note that this is still a string - we can still substitute PHP variables directly into it, like this:\nlet A = $A; let B = $B; Next up, let's define the box - we'll also need to think about the x/y ranges of our graph.\nIn this case, I'll show values of \\(x\\) from -1 to 8 so there are sufficiently enough values to look at. Then, for the y-range, since we'll be graphing \\(y = Ax\\) and \\(y = Bx\\) with \\(A  B\\), I'll set it from -A to 8A so that the lines fit properly.\nlet box = JXG.JSXGraph.initBoard(\u0026#39;graph\u0026#39;, {boundingbox: [-1, A*8, 8, -A], showNavigation: false, axis: true}); The 'graph' argument corresponds to the id attribute of the \u0026lt;div\u0026gt; in $question_text. Meanwhile, the rest of the arguments are supplied inside curly brackets:\n The boundingbox decides the top-left (-1, A*8) and bottom-right (8, -A) coordinates of the axes. showNavigation is false, mainly to remove clutter from the page axis is true to provide us with an automatic axis on the graph  Right now, with this code, we get a diagram looks like this (if A = 30):\n  let box = JXG.JSXGraph.initBoard('ex1', {boundingbox: [-1, 240, 8, -30], showNavigation: false, axis: true});  Now we just need to add in the lines (and the appropriate labels) - we can use the .create() method on the box we just created:\nlet lineA = box.create(\u0026#39;functiongraph\u0026#39;, [(n) =\u0026gt; {return A*n}, 0, 10], {name: \u0026#34;Farm A\u0026#34;, withLabel: true, label: {position: \u0026#39;bot\u0026#39;, offset: [50, 100]}, color: \u0026#39;black\u0026#39;, strokeWidth: 2}); let lineB = box.create(\u0026#39;functiongraph\u0026#39;, [(n) =\u0026gt; {return B*n}, 0, 10], {name: \u0026#34;Farm B\u0026#34;, withLabel: true, label: {position: \u0026#39;bot\u0026#39;, offset: [100, 50]}, color: \u0026#39;blue\u0026#39;, strokeWidth: 2}); With each time we call the method, we give it the following arguments:\n The first argument is the string \u0026quot;functiongraph\u0026quot; to specify that we want a functiongraph object; The second argument is an array of 3 values [(n) =\u0026gt; {return A*n}, 0, 10].  The first value, (n) =\u0026gt; {return A*n}, is a function - in this case, it's the line \\(y = Ax\\) The second and third values, 0 and 10, specify the range of values that this function will be run on. Since the x-values on the graph are from -1 to 8, the lines will start from 0 and continue all the way to the right.  The third argument includes our other generic arguments that modify how our function looks:  We set a name and withLabel: true to display the \u0026quot;Farm A/B\u0026quot; text next to the line The location of the label is set through the label argument itself - the offset is in pixels. Line colour is controlled with color Line width is controlled with strokeWidth   With these two extra lines, our graph now looks like this (given A = 30, B = 20):\n  let box2 = JXG.JSXGraph.initBoard('ex2', {boundingbox: [-1, 240, 8, -30], showNavigation: false, axis: true}); let lineA = box2.create('functiongraph', [(n) = {return 30*n}, 0, 10], {name: \"Farm A\", withLabel: true, label: {position: 'bot', offset: [50, 100]}, color: 'black', strokeWidth: 2}); let lineB = box2.create('functiongraph', [(n) = {return 20*n}, 0, 10], {name: \"Farm B\", withLabel: true, label: {position: 'bot', offset: [100, 50]}, color: 'blue', strokeWidth: 2}); ;  And we're done with the diagram! (Well, there's still more if you want to include axis labels and stuff like that - but I guess I'll leave that as an exercise to the reader 😛)\nJust remember to echo out the actual question text and the script:\necho $question_text; echo $script; Final Question Code So let's put everything together now, in the question box:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  \u0026lt;?php // Cost of 1kg cherries for farm A and farm B $A = mt_rand(5, 10); $B = mt_rand(2, $A - 2); // B always smaller than A  // make $A and $B divisible by 5 $A *= 5; $B *= 5; // Kilos of cherries bought $kilos_bought = mt_rand(5, 10); // Find difference between amount spent at farm A vs farm B $spentA = $A * $kilos_bought; $spentB = $B * $kilos_bought; $answer = $spentA - $spentB; // Question text and solution $question_text = \u0026#34;Two farms, Farm A and Farm B, sell cherries at a constant rate per kilogram. The prices of these two suppliers are shown in the graph below. \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;Last month, a restaurant spent `$$spentA` buying cherries from Farm A. How much would they have saved by buying from Farm B instead? \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;\u0026lt;div id=\u0026#39;graph\u0026#39; class=\u0026#39;jxgbox\u0026#39; style=\u0026#39;width:400px; height:400px\u0026#39;\u0026gt;\u0026lt;/div\u0026gt;\u0026#34;; $AB_diff = $A - $B; $solution = \u0026#34;Looking at the graph, Farm A charges `$$A` per kilogram of cherries, while Farm B charges `$$B` per kilogram of cherries. \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;The restaurant spent `$$spentA` buying cherries from Farm A, so they bought `$spentA/ $A= $kilos_bought` kilograms of cherries. \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;They would save `$$A- $$B= $$AB_diff` per kilogram of cherries bought from farm B. \u0026lt;br\u0026gt;\u0026#34; . \u0026#34;Therefore, by buying from farm B instead, they would have saved `$$AB_difftimes $kilos_bought= $$answer` dollars in total.\u0026#34;; // Script for diagram $script = \u0026lt;\u0026lt;\u0026lt;SCRIPT\u0026lt;script type=\u0026#34;text/javascript\u0026#34; charset=\u0026#34;UTF-8\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraphcore.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/jsxgraph/distrib/jsxgraph.css\u0026#34; /\u0026gt; \u0026lt;script\u0026gt; let A = $A; let B = $B; let box = JXG.JSXGraph.initBoard(\u0026#39;graph\u0026#39;, {boundingbox: [-1, A*8, 8, -A], showNavigation: false, axis: true}); let lineA = box.create(\u0026#39;functiongraph\u0026#39;, [(n) =\u0026gt; {return A*n}, 0, 10], {name: \u0026#34;Farm A\u0026#34;, withLabel: true, label: {position: \u0026#39;bot\u0026#39;, offset: [50, 100]}, color: \u0026#39;black\u0026#39;, strokeWidth: 2}); let lineB = box.create(\u0026#39;functiongraph\u0026#39;, [(n) =\u0026gt; {return B*n}, 0, 10], {name: \u0026#34;Farm B\u0026#34;, withLabel: true, label: {position: \u0026#39;bot\u0026#39;, offset: [100, 50]}, color: \u0026#39;blue\u0026#39;, strokeWidth: 2}); \u0026lt;/script\u0026gt; SCRIPT; echo $question_text; echo $script; ?\u0026gt;   And once again, the code in the answer and solution is very short:\n1 2 3  \u0026lt;?php echo $answer; ?\u0026gt;   1 2 3  \u0026lt;?php echo $solution; ?\u0026gt;   Results Here are some possible random generated results from the above code. I've only included the question text because it spans a rather large space, but the answer and solution text are also there!\nExample 1   Example 2   Example 3    "},{"id":29,"href":"/","title":"About","parent":"","content":"Welcome to my question-writing guide! The aim of this document is to give you a practical idea on what dynamic questions are, how they differ to the usual \u0026lsquo;static\u0026rsquo; questions, and provide some coding techniques that will hopefully make the process of writing questions easier.\nThe guide is currently incomplete; only Sections 1 and 2 of this guide have been properly written.  Regarding prerequisites: For Sections 1 and 2, knowledge of basic HTML syntax and AsciiMath would be useful. From Section 3, I\u0026rsquo;ll begin including snippets of PHP code to aid with explanations - knowledge of arrays, conditionals (if/else), loops (for/while), and functions will probably be required then.\nIf you have any questions or confusions while reading this, please feel free to contact me! The guide is still pretty new and I\u0026rsquo;m sure there\u0026rsquo;ll be quite a few spots I\u0026rsquo;ve forgotten to clear up.\nPlease note that this document is not meant to be read all at once! I\u0026rsquo;ve intended it as something that you can frequently come back to if you\u0026rsquo;re ever stuck on something.\n Section 1 (the introduction) talks about how to use the QBM itself; Section 2 focuses on general dos and don\u0026rsquo;ts with designing and coding questions; The remaining sections will cover more specific situations that arise with certain kinds of math questions.  If you\u0026rsquo;ve already read the original QBM guide and just want a quick look at some new advice with dynamic questions in general, then you might want to begin with 2.1. Common Issues with Dynamic Questions and 2.2. General Design Guidelines!\n "},{"id":30,"href":"/categories/","title":"Categories","parent":"About","content":""},{"id":31,"href":"/other/contact/","title":"Contact Info","parent":"Other","content":"If there\u0026rsquo;s stuff that doesn\u0026rsquo;t quite make sense or seems wrong, feel free to send me a message! While I\u0026rsquo;ll try to respond as soon as I can, do note that there are a lot of resources online that can help as well.\nHere are a few ways to contact me:\n Find me on the EV Slack!  Send a DM, or to the channel #wmc-questions or #omc-questions.   Email: jyim1120@gmail.com Messenger: jonathan.yim.121  Also note that there are other question writers on the Slack channel you can ask for help!\n"}]